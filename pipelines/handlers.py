import os
from telegram import Update, InputFile
from telegram.ext import ContextTypes
from pipelines.v_download import run_pipeline, get_available_formats
from pipelines.subtitles import transcribe_youtube_with_punctuation, save_last_url
from pipelines.rag import generate_summary, ask_question
from pipelines.keyboards import action_keyboard, format_keyboard, language_keyboard
from pipelines.utils import is_youtube_link, send_action_menu

CHOOSING_LANGUAGE, WAITING_LINK, CHOOSING_ACTION, CHOOSING_FORMAT, WAITING_QUESTION = range(5)
user_sessions = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:\nChoose the language",
        reply_markup=language_keyboard()
    )
    return CHOOSING_LANGUAGE

async def handle_language_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    language = "ru" if query.data == "lang_ru" else "en"
    user_sessions[user_id] = {"language": language}

    text = "‚úÖ –Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏." if language == "ru" else "‚úÖ Language selected. Now send a YouTube video link for processing."
    await query.edit_message_text(text)
    return WAITING_LINK

async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    user_id = update.effective_user.id
    language = user_sessions[user_id].get("language", "ru")

    if not is_youtube_link(url):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube." if language == "ru" else "‚ö†Ô∏è Please send a valid YouTube link.")
        return WAITING_LINK

    processing_message = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ..." if language == "ru" else "üîÑ Processing video, please wait...")

    try:
        save_last_url(url)
        user_sessions[user_id]["url"] = url

        formats = get_available_formats(url)
        if not formats:
            await processing_message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã." if language == "ru" else "‚ö†Ô∏è Failed to retrieve available formats.")
            await send_action_menu(update, context, language)
            return CHOOSING_ACTION

        user_sessions[user_id]["formats"] = formats
        await processing_message.edit_text("‚úÖ –í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ." if language == "ru" else "‚úÖ Video processed! Choose an action below.")
        await send_action_menu(update, context, language)
        return CHOOSING_ACTION

    except Exception as e:
        await processing_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return CHOOSING_ACTION

async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    language = user_sessions[user_id].get("language", "ru")

    if query.data == "download_video":
        formats = user_sessions[user_id].get("formats", [])
        await query.edit_message_text(
            "üì• –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:" if language == "ru" else "üì• Choose video quality:",
            reply_markup=format_keyboard(formats, language)
        )
        return CHOOSING_FORMAT

    elif query.data == "get_summary":
        await query.edit_message_text("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–¥—Ä–æ–±–Ω–æ–µ summary..." if language == "ru" else "üìù Generating detailed summary...")
        summary = generate_summary(language=language)
        await query.message.reply_text(f"üìÑ {'–í–∞—à –æ–±–∑–æ—Ä' if language == 'ru' else 'Your Summary'}:\n\n{summary}")
        await send_action_menu(query, context, language)
        return CHOOSING_ACTION

    elif query.data == "ask_question":
        await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –≤–∏–¥–µ–æ:" if language == "ru" else "‚úçÔ∏è Enter your question about the video:")
        return WAITING_QUESTION

    elif query.data == "new_video" or query.data == "go_back":
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await send_action_menu(query, context, language)
        return CHOOSING_ACTION


async def handle_format(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    chosen_format_id = query.data.replace("format_", "")
    language = user_sessions[user_id].get("language", "ru")
    url = user_sessions[user_id]["url"]

    await query.edit_message_text(
        "üîÑ –°–∫–∞—á–∏–≤–∞—é –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ..." if language == "ru"
        else "üîÑ Downloading the selected video, please wait..."
    )

    output_file = run_pipeline(url, chosen_format_id)

    if not output_file or not os.path.exists(output_file):
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ." if language == "ru" else "‚ùå Error downloading video.")
        await send_action_menu(query, context, language)
        return CHOOSING_ACTION

    try:
        with open(output_file, "rb") as f:
            await context.bot.send_video(
                chat_id=query.message.chat_id,
                video=InputFile(f),
                caption="‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!" if language == "ru" else "‚úÖ Video ready!",
                supports_streaming=True,
                read_timeout=300 # Increase read timeout for large files
            )
    except Exception as e:
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
    finally:
        try:
            os.remove(output_file)
        except Exception:
            pass

    await send_action_menu(query, context, language)
    return CHOOSING_ACTION

async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    language = user_sessions[user_id].get("language", "ru")
    user_text = update.message.text

    await update.message.reply_text("üîé –ò—â—É –æ—Ç–≤–µ—Ç..." if language == "ru" else "üîé Searching for an answer...")
    answer = ask_question(user_text, language=language)
    await update.message.reply_text(f"üìÑ {'–û—Ç–≤–µ—Ç' if language == 'ru' else 'Answer'}:\n{answer}")
    await send_action_menu(update, context, language)
    return CHOOSING_ACTION
